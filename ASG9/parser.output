Terminals unused in grammar

   LEFT_SQ_BKT
   NUL
   PRODUCT
   RETURN
   RIGHT_SQ_BKT


Grammar

    0 $accept: prog $end

    1 prog: GLOBAL declList stmtListO END

    2 declList: /* empty */
    3         | decl declList

    4 decl: DEF typeList END

    5 typeList: typeList varList COLON type SEMICOLON
    6         | varList COLON type SEMICOLON

    7 varList: var COMMA varList
    8        | var

    9 var: ID

   10 type: INT
   11     | FLOAT
   12     | BOOLEAN
   13     | NULL_

   14 stmtListO: /* empty */
   15          | stmtList

   16 stmtList: stmtList stmt
   17         | stmt

   18 stmt: assignmentStmt SEMICOLON
   19     | readStmt SEMICOLON
   20     | printStmt SEMICOLON
   21     | ifStmt
   22     | whileStmt

   23 assignmentStmt: ID ASSIGN expO

   24 readStmt: READ FORMAT expO

   25 printStmt: PRINT FORMAT expO

   26 ifStmt: IF bExp COLON stmtList elsePart END

   27 elsePart: /* empty */
   28         | ELSE stmtList

   29 whileStmt: WHILE bExp COLON stmtList END

   30 expO: /* empty */
   31     | exp

   32 bExp: bExp OR bExp
   33     | bExp AND bExp
   34     | NOT bExp
   35     | LEFT_PAREN bExp RIGHT_PAREN
   36     | exp relOP exp

   37 relOP: EQ
   38      | LE
   39      | LT
   40      | GE
   41      | GT
   42      | NE

   43 exp: exp PLUS exp
   44    | exp MINUS exp
   45    | exp MULT exp
   46    | exp DIV exp
   47    | exp MOD exp
   48    | exp DOT exp
   49    | LEFT_PAREN exp RIGHT_PAREN
   50    | ID
   51    | INT_CONST
   52    | FLOAT_CONST


Terminals, with rules where they appear

$end (0) 0
error (256)
AND (258) 33
ASSIGN (259) 23
COLON (260) 5 6 26 29
COMMA (261) 7
DEF (262) 4
ELSE (263) 28
DIV (264) 46
END (265) 1 4 26 29
EQ (266) 37
FLOAT (267) 11
GE (268) 40
GLOBAL (269) 1
GT (270) 41
IF (271) 26
INT (272) 10
LEFT_PAREN (273) 35 49
LEFT_SQ_BKT (274)
LE (275) 38
LT (276) 39
MINUS (277) 44
MOD (278) 47
MULT (279) 45
NE (280) 42
NOT (281) 34
NUL (282)
OR (283) 32
PLUS (284) 43
PRINT (285) 25
PRODUCT (286)
READ (287) 24
RETURN (288)
RIGHT_PAREN (289) 35 49
RIGHT_SQ_BKT (290)
SEMICOLON (291) 5 6 18 19 20
WHILE (292) 29
ID (293) 9 23 50
INT_CONST (294) 51
FLOAT_CONST (295) 52
DOT (296) 48
FORMAT (297) 24 25
BOOLEAN (298) 12
NULL_ (299) 13


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
prog (46)
    on left: 1, on right: 0
declList (47)
    on left: 2 3, on right: 1 3
decl (48)
    on left: 4, on right: 3
typeList (49)
    on left: 5 6, on right: 4 5
varList (50)
    on left: 7 8, on right: 5 6 7
var (51)
    on left: 9, on right: 7 8
type (52)
    on left: 10 11 12 13, on right: 5 6
stmtListO (53)
    on left: 14 15, on right: 1
stmtList (54)
    on left: 16 17, on right: 15 16 26 28 29
stmt (55)
    on left: 18 19 20 21 22, on right: 16 17
assignmentStmt (56)
    on left: 23, on right: 18
readStmt (57)
    on left: 24, on right: 19
printStmt (58)
    on left: 25, on right: 20
ifStmt (59)
    on left: 26, on right: 21
elsePart (60)
    on left: 27 28, on right: 26
whileStmt (61)
    on left: 29, on right: 22
expO (62)
    on left: 30 31, on right: 23 24 25
bExp (63)
    on left: 32 33 34 35 36, on right: 26 29 32 33 34 35
relOP (64)
    on left: 37 38 39 40 41 42, on right: 36
exp (65)
    on left: 43 44 45 46 47 48 49 50 51 52, on right: 31 36 43 44 45
    46 47 48 49


state 0

    0 $accept: . prog $end

    GLOBAL  shift, and go to state 1

    prog  go to state 2


state 1

    1 prog: GLOBAL . declList stmtListO END

    DEF  shift, and go to state 3

    $default  reduce using rule 2 (declList)

    declList  go to state 4
    decl      go to state 5


state 2

    0 $accept: prog . $end

    $end  shift, and go to state 6


state 3

    4 decl: DEF . typeList END

    ID  shift, and go to state 7

    typeList  go to state 8
    varList   go to state 9
    var       go to state 10


state 4

    1 prog: GLOBAL declList . stmtListO END

    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    $default  reduce using rule 14 (stmtListO)

    stmtListO       go to state 16
    stmtList        go to state 17
    stmt            go to state 18
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    whileStmt       go to state 23


state 5

    3 declList: decl . declList

    DEF  shift, and go to state 3

    $default  reduce using rule 2 (declList)

    declList  go to state 24
    decl      go to state 5


state 6

    0 $accept: prog $end .

    $default  accept


state 7

    9 var: ID .

    $default  reduce using rule 9 (var)


state 8

    4 decl: DEF typeList . END
    5 typeList: typeList . varList COLON type SEMICOLON

    END  shift, and go to state 25
    ID   shift, and go to state 7

    varList  go to state 26
    var      go to state 10


state 9

    6 typeList: varList . COLON type SEMICOLON

    COLON  shift, and go to state 27


state 10

    7 varList: var . COMMA varList
    8        | var .

    COMMA  shift, and go to state 28

    $default  reduce using rule 8 (varList)


state 11

   26 ifStmt: IF . bExp COLON stmtList elsePart END

    LEFT_PAREN   shift, and go to state 29
    NOT          shift, and go to state 30
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    bExp  go to state 34
    exp   go to state 35


state 12

   25 printStmt: PRINT . FORMAT expO

    FORMAT  shift, and go to state 36


state 13

   24 readStmt: READ . FORMAT expO

    FORMAT  shift, and go to state 37


state 14

   29 whileStmt: WHILE . bExp COLON stmtList END

    LEFT_PAREN   shift, and go to state 29
    NOT          shift, and go to state 30
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    bExp  go to state 38
    exp   go to state 35


state 15

   23 assignmentStmt: ID . ASSIGN expO

    ASSIGN  shift, and go to state 39


state 16

    1 prog: GLOBAL declList stmtListO . END

    END  shift, and go to state 40


state 17

   15 stmtListO: stmtList .
   16 stmtList: stmtList . stmt

    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    $default  reduce using rule 15 (stmtListO)

    stmt            go to state 41
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    whileStmt       go to state 23


state 18

   17 stmtList: stmt .

    $default  reduce using rule 17 (stmtList)


state 19

   18 stmt: assignmentStmt . SEMICOLON

    SEMICOLON  shift, and go to state 42


state 20

   19 stmt: readStmt . SEMICOLON

    SEMICOLON  shift, and go to state 43


state 21

   20 stmt: printStmt . SEMICOLON

    SEMICOLON  shift, and go to state 44


state 22

   21 stmt: ifStmt .

    $default  reduce using rule 21 (stmt)


state 23

   22 stmt: whileStmt .

    $default  reduce using rule 22 (stmt)


state 24

    3 declList: decl declList .

    $default  reduce using rule 3 (declList)


state 25

    4 decl: DEF typeList END .

    $default  reduce using rule 4 (decl)


state 26

    5 typeList: typeList varList . COLON type SEMICOLON

    COLON  shift, and go to state 45


state 27

    6 typeList: varList COLON . type SEMICOLON

    FLOAT    shift, and go to state 46
    INT      shift, and go to state 47
    BOOLEAN  shift, and go to state 48
    NULL_    shift, and go to state 49

    type  go to state 50


state 28

    7 varList: var COMMA . varList

    ID  shift, and go to state 7

    varList  go to state 51
    var      go to state 10


state 29

   35 bExp: LEFT_PAREN . bExp RIGHT_PAREN
   49 exp: LEFT_PAREN . exp RIGHT_PAREN

    LEFT_PAREN   shift, and go to state 29
    NOT          shift, and go to state 30
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    bExp  go to state 52
    exp   go to state 53


state 30

   34 bExp: NOT . bExp

    LEFT_PAREN   shift, and go to state 29
    NOT          shift, and go to state 30
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    bExp  go to state 54
    exp   go to state 35


state 31

   50 exp: ID .

    $default  reduce using rule 50 (exp)


state 32

   51 exp: INT_CONST .

    $default  reduce using rule 51 (exp)


state 33

   52 exp: FLOAT_CONST .

    $default  reduce using rule 52 (exp)


state 34

   26 ifStmt: IF bExp . COLON stmtList elsePart END
   32 bExp: bExp . OR bExp
   33     | bExp . AND bExp

    AND    shift, and go to state 55
    COLON  shift, and go to state 56
    OR     shift, and go to state 57


state 35

   36 bExp: exp . relOP exp
   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp

    DIV    shift, and go to state 58
    EQ     shift, and go to state 59
    GE     shift, and go to state 60
    GT     shift, and go to state 61
    LE     shift, and go to state 62
    LT     shift, and go to state 63
    MINUS  shift, and go to state 64
    MOD    shift, and go to state 65
    MULT   shift, and go to state 66
    NE     shift, and go to state 67
    PLUS   shift, and go to state 68
    DOT    shift, and go to state 69

    relOP  go to state 70


state 36

   25 printStmt: PRINT FORMAT . expO

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    $default  reduce using rule 30 (expO)

    expO  go to state 72
    exp   go to state 73


state 37

   24 readStmt: READ FORMAT . expO

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    $default  reduce using rule 30 (expO)

    expO  go to state 74
    exp   go to state 73


state 38

   29 whileStmt: WHILE bExp . COLON stmtList END
   32 bExp: bExp . OR bExp
   33     | bExp . AND bExp

    AND    shift, and go to state 55
    COLON  shift, and go to state 75
    OR     shift, and go to state 57


state 39

   23 assignmentStmt: ID ASSIGN . expO

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    $default  reduce using rule 30 (expO)

    expO  go to state 76
    exp   go to state 73


state 40

    1 prog: GLOBAL declList stmtListO END .

    $default  reduce using rule 1 (prog)


state 41

   16 stmtList: stmtList stmt .

    $default  reduce using rule 16 (stmtList)


state 42

   18 stmt: assignmentStmt SEMICOLON .

    $default  reduce using rule 18 (stmt)


state 43

   19 stmt: readStmt SEMICOLON .

    $default  reduce using rule 19 (stmt)


state 44

   20 stmt: printStmt SEMICOLON .

    $default  reduce using rule 20 (stmt)


state 45

    5 typeList: typeList varList COLON . type SEMICOLON

    FLOAT    shift, and go to state 46
    INT      shift, and go to state 47
    BOOLEAN  shift, and go to state 48
    NULL_    shift, and go to state 49

    type  go to state 77


state 46

   11 type: FLOAT .

    $default  reduce using rule 11 (type)


state 47

   10 type: INT .

    $default  reduce using rule 10 (type)


state 48

   12 type: BOOLEAN .

    $default  reduce using rule 12 (type)


state 49

   13 type: NULL_ .

    $default  reduce using rule 13 (type)


state 50

    6 typeList: varList COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 78


state 51

    7 varList: var COMMA varList .

    $default  reduce using rule 7 (varList)


state 52

   32 bExp: bExp . OR bExp
   33     | bExp . AND bExp
   35     | LEFT_PAREN bExp . RIGHT_PAREN

    AND          shift, and go to state 55
    OR           shift, and go to state 57
    RIGHT_PAREN  shift, and go to state 79


state 53

   36 bExp: exp . relOP exp
   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp
   49    | LEFT_PAREN exp . RIGHT_PAREN

    DIV          shift, and go to state 58
    EQ           shift, and go to state 59
    GE           shift, and go to state 60
    GT           shift, and go to state 61
    LE           shift, and go to state 62
    LT           shift, and go to state 63
    MINUS        shift, and go to state 64
    MOD          shift, and go to state 65
    MULT         shift, and go to state 66
    NE           shift, and go to state 67
    PLUS         shift, and go to state 68
    RIGHT_PAREN  shift, and go to state 80
    DOT          shift, and go to state 69

    relOP  go to state 70


state 54

   32 bExp: bExp . OR bExp
   33     | bExp . AND bExp
   34     | NOT bExp .

    $default  reduce using rule 34 (bExp)


state 55

   33 bExp: bExp AND . bExp

    LEFT_PAREN   shift, and go to state 29
    NOT          shift, and go to state 30
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    bExp  go to state 81
    exp   go to state 35


state 56

   26 ifStmt: IF bExp COLON . stmtList elsePart END

    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    stmtList        go to state 82
    stmt            go to state 18
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    whileStmt       go to state 23


state 57

   32 bExp: bExp OR . bExp

    LEFT_PAREN   shift, and go to state 29
    NOT          shift, and go to state 30
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    bExp  go to state 83
    exp   go to state 35


state 58

   46 exp: exp DIV . exp

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 84


state 59

   37 relOP: EQ .

    $default  reduce using rule 37 (relOP)


state 60

   40 relOP: GE .

    $default  reduce using rule 40 (relOP)


state 61

   41 relOP: GT .

    $default  reduce using rule 41 (relOP)


state 62

   38 relOP: LE .

    $default  reduce using rule 38 (relOP)


state 63

   39 relOP: LT .

    $default  reduce using rule 39 (relOP)


state 64

   44 exp: exp MINUS . exp

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 85


state 65

   47 exp: exp MOD . exp

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 86


state 66

   45 exp: exp MULT . exp

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 87


state 67

   42 relOP: NE .

    $default  reduce using rule 42 (relOP)


state 68

   43 exp: exp PLUS . exp

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 88


state 69

   48 exp: exp DOT . exp

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 89


state 70

   36 bExp: exp relOP . exp

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 90


state 71

   49 exp: LEFT_PAREN . exp RIGHT_PAREN

    LEFT_PAREN   shift, and go to state 71
    ID           shift, and go to state 31
    INT_CONST    shift, and go to state 32
    FLOAT_CONST  shift, and go to state 33

    exp  go to state 91


state 72

   25 printStmt: PRINT FORMAT expO .

    $default  reduce using rule 25 (printStmt)


state 73

   31 expO: exp .
   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp

    DIV    shift, and go to state 58
    MINUS  shift, and go to state 64
    MOD    shift, and go to state 65
    MULT   shift, and go to state 66
    PLUS   shift, and go to state 68
    DOT    shift, and go to state 69

    $default  reduce using rule 31 (expO)


state 74

   24 readStmt: READ FORMAT expO .

    $default  reduce using rule 24 (readStmt)


state 75

   29 whileStmt: WHILE bExp COLON . stmtList END

    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    stmtList        go to state 92
    stmt            go to state 18
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    whileStmt       go to state 23


state 76

   23 assignmentStmt: ID ASSIGN expO .

    $default  reduce using rule 23 (assignmentStmt)


state 77

    5 typeList: typeList varList COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 93


state 78

    6 typeList: varList COLON type SEMICOLON .

    $default  reduce using rule 6 (typeList)


state 79

   35 bExp: LEFT_PAREN bExp RIGHT_PAREN .

    $default  reduce using rule 35 (bExp)


state 80

   49 exp: LEFT_PAREN exp RIGHT_PAREN .

    $default  reduce using rule 49 (exp)


state 81

   32 bExp: bExp . OR bExp
   33     | bExp . AND bExp
   33     | bExp AND bExp .

    $default  reduce using rule 33 (bExp)


state 82

   16 stmtList: stmtList . stmt
   26 ifStmt: IF bExp COLON stmtList . elsePart END

    ELSE   shift, and go to state 94
    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    $default  reduce using rule 27 (elsePart)

    stmt            go to state 41
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    elsePart        go to state 95
    whileStmt       go to state 23


state 83

   32 bExp: bExp . OR bExp
   32     | bExp OR bExp .
   33     | bExp . AND bExp

    $default  reduce using rule 32 (bExp)


state 84

   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   46    | exp DIV exp .
   47    | exp . MOD exp
   48    | exp . DOT exp

    DOT  shift, and go to state 69

    $default  reduce using rule 46 (exp)


state 85

   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   44    | exp MINUS exp .
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp

    DIV   shift, and go to state 58
    MOD   shift, and go to state 65
    MULT  shift, and go to state 66
    DOT   shift, and go to state 69

    $default  reduce using rule 44 (exp)


state 86

   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   47    | exp MOD exp .
   48    | exp . DOT exp

    DOT  shift, and go to state 69

    $default  reduce using rule 47 (exp)


state 87

   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   45    | exp MULT exp .
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp

    DOT  shift, and go to state 69

    $default  reduce using rule 45 (exp)


state 88

   43 exp: exp . PLUS exp
   43    | exp PLUS exp .
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp

    DIV   shift, and go to state 58
    MOD   shift, and go to state 65
    MULT  shift, and go to state 66
    DOT   shift, and go to state 69

    $default  reduce using rule 43 (exp)


state 89

   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp
   48    | exp DOT exp .

    $default  reduce using rule 48 (exp)


state 90

   36 bExp: exp relOP exp .
   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp

    DIV    shift, and go to state 58
    MINUS  shift, and go to state 64
    MOD    shift, and go to state 65
    MULT   shift, and go to state 66
    PLUS   shift, and go to state 68
    DOT    shift, and go to state 69

    $default  reduce using rule 36 (bExp)


state 91

   43 exp: exp . PLUS exp
   44    | exp . MINUS exp
   45    | exp . MULT exp
   46    | exp . DIV exp
   47    | exp . MOD exp
   48    | exp . DOT exp
   49    | LEFT_PAREN exp . RIGHT_PAREN

    DIV          shift, and go to state 58
    MINUS        shift, and go to state 64
    MOD          shift, and go to state 65
    MULT         shift, and go to state 66
    PLUS         shift, and go to state 68
    RIGHT_PAREN  shift, and go to state 80
    DOT          shift, and go to state 69


state 92

   16 stmtList: stmtList . stmt
   29 whileStmt: WHILE bExp COLON stmtList . END

    END    shift, and go to state 96
    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    stmt            go to state 41
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    whileStmt       go to state 23


state 93

    5 typeList: typeList varList COLON type SEMICOLON .

    $default  reduce using rule 5 (typeList)


state 94

   28 elsePart: ELSE . stmtList

    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    stmtList        go to state 97
    stmt            go to state 18
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    whileStmt       go to state 23


state 95

   26 ifStmt: IF bExp COLON stmtList elsePart . END

    END  shift, and go to state 98


state 96

   29 whileStmt: WHILE bExp COLON stmtList END .

    $default  reduce using rule 29 (whileStmt)


state 97

   16 stmtList: stmtList . stmt
   28 elsePart: ELSE stmtList .

    IF     shift, and go to state 11
    PRINT  shift, and go to state 12
    READ   shift, and go to state 13
    WHILE  shift, and go to state 14
    ID     shift, and go to state 15

    $default  reduce using rule 28 (elsePart)

    stmt            go to state 41
    assignmentStmt  go to state 19
    readStmt        go to state 20
    printStmt       go to state 21
    ifStmt          go to state 22
    whileStmt       go to state 23


state 98

   26 ifStmt: IF bExp COLON stmtList elsePart END .

    $default  reduce using rule 26 (ifStmt)
